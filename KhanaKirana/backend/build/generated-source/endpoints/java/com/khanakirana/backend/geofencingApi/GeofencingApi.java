/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2015-11-16 19:10:01 UTC)
 * on 2015-11-22 at 08:44:52 UTC 
 * Modify at your own risk.
 */

package com.khanakirana.backend.geofencingApi;

/**
 * Service definition for GeofencingApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link GeofencingApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class GeofencingApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the geofencingApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "geofencingApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public GeofencingApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  GeofencingApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "add".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link Add#execute()} method to invoke the remote operation.
   *
   * @param group
   * @param index
   * @param content the {@link com.khanakirana.backend.geofencingApi.model.Fence}
   * @return the request
   */
  public Add add(java.lang.String group, java.lang.Boolean index, com.khanakirana.backend.geofencingApi.model.Fence content) throws java.io.IOException {
    Add result = new Add(group, index, content);
    initialize(result);
    return result;
  }

  public class Add extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.Fence> {

    private static final String REST_PATH = "add";

    /**
     * Create a request for the method "add".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link Add#execute()} method to invoke the remote operation. <p>
     * {@link Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @param index
     * @param content the {@link com.khanakirana.backend.geofencingApi.model.Fence}
     * @since 1.13
     */
    protected Add(java.lang.String group, java.lang.Boolean index, com.khanakirana.backend.geofencingApi.model.Fence content) {
      super(GeofencingApi.this, "POST", REST_PATH, content, com.khanakirana.backend.geofencingApi.model.Fence.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
      this.index = com.google.api.client.util.Preconditions.checkNotNull(index, "Required parameter index must be specified.");
    }

    @Override
    public Add setAlt(java.lang.String alt) {
      return (Add) super.setAlt(alt);
    }

    @Override
    public Add setFields(java.lang.String fields) {
      return (Add) super.setFields(fields);
    }

    @Override
    public Add setKey(java.lang.String key) {
      return (Add) super.setKey(key);
    }

    @Override
    public Add setOauthToken(java.lang.String oauthToken) {
      return (Add) super.setOauthToken(oauthToken);
    }

    @Override
    public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Add) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Add setQuotaUser(java.lang.String quotaUser) {
      return (Add) super.setQuotaUser(quotaUser);
    }

    @Override
    public Add setUserIp(java.lang.String userIp) {
      return (Add) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public Add setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Boolean index;

    /**

     */
    public java.lang.Boolean getIndex() {
      return index;
    }

    public Add setIndex(java.lang.Boolean index) {
      this.index = index;
      return this;
    }

    @Override
    public Add set(String parameterName, Object value) {
      return (Add) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "buildIndex".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link BuildIndex#execute()} method to invoke the remote operation.
   *
   * @param group
   * @return the request
   */
  public BuildIndex buildIndex(java.lang.String group) throws java.io.IOException {
    BuildIndex result = new BuildIndex(group);
    initialize(result);
    return result;
  }

  public class BuildIndex extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.Fence> {

    private static final String REST_PATH = "buildIndex";

    /**
     * Create a request for the method "buildIndex".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link BuildIndex#execute()} method to invoke the remote
     * operation. <p> {@link
     * BuildIndex#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @since 1.13
     */
    protected BuildIndex(java.lang.String group) {
      super(GeofencingApi.this, "GET", REST_PATH, null, com.khanakirana.backend.geofencingApi.model.Fence.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public BuildIndex setAlt(java.lang.String alt) {
      return (BuildIndex) super.setAlt(alt);
    }

    @Override
    public BuildIndex setFields(java.lang.String fields) {
      return (BuildIndex) super.setFields(fields);
    }

    @Override
    public BuildIndex setKey(java.lang.String key) {
      return (BuildIndex) super.setKey(key);
    }

    @Override
    public BuildIndex setOauthToken(java.lang.String oauthToken) {
      return (BuildIndex) super.setOauthToken(oauthToken);
    }

    @Override
    public BuildIndex setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (BuildIndex) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public BuildIndex setQuotaUser(java.lang.String quotaUser) {
      return (BuildIndex) super.setQuotaUser(quotaUser);
    }

    @Override
    public BuildIndex setUserIp(java.lang.String userIp) {
      return (BuildIndex) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public BuildIndex setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @Override
    public BuildIndex set(String parameterName, Object value) {
      return (BuildIndex) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getById".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link GetById#execute()} method to invoke the remote operation.
   *
   * @param group
   * @param id
   * @return the request
   */
  public GetById getById(java.lang.String group, java.lang.Long id) throws java.io.IOException {
    GetById result = new GetById(group, id);
    initialize(result);
    return result;
  }

  public class GetById extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.FenceCollection> {

    private static final String REST_PATH = "getById";

    /**
     * Create a request for the method "getById".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link GetById#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetById#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @param id
     * @since 1.13
     */
    protected GetById(java.lang.String group, java.lang.Long id) {
      super(GeofencingApi.this, "GET", REST_PATH, null, com.khanakirana.backend.geofencingApi.model.FenceCollection.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetById setAlt(java.lang.String alt) {
      return (GetById) super.setAlt(alt);
    }

    @Override
    public GetById setFields(java.lang.String fields) {
      return (GetById) super.setFields(fields);
    }

    @Override
    public GetById setKey(java.lang.String key) {
      return (GetById) super.setKey(key);
    }

    @Override
    public GetById setOauthToken(java.lang.String oauthToken) {
      return (GetById) super.setOauthToken(oauthToken);
    }

    @Override
    public GetById setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetById) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetById setQuotaUser(java.lang.String quotaUser) {
      return (GetById) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetById setUserIp(java.lang.String userIp) {
      return (GetById) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public GetById setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetById setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetById set(String parameterName, Object value) {
      return (GetById) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "list".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link List#execute()} method to invoke the remote operation.
   *
   * @param group
   * @return the request
   */
  public List list(java.lang.String group) throws java.io.IOException {
    List result = new List(group);
    initialize(result);
    return result;
  }

  public class List extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.FenceCollection> {

    private static final String REST_PATH = "list";

    /**
     * Create a request for the method "list".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
     * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @since 1.13
     */
    protected List(java.lang.String group) {
      super(GeofencingApi.this, "GET", REST_PATH, null, com.khanakirana.backend.geofencingApi.model.FenceCollection.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public List setAlt(java.lang.String alt) {
      return (List) super.setAlt(alt);
    }

    @Override
    public List setFields(java.lang.String fields) {
      return (List) super.setFields(fields);
    }

    @Override
    public List setKey(java.lang.String key) {
      return (List) super.setKey(key);
    }

    @Override
    public List setOauthToken(java.lang.String oauthToken) {
      return (List) super.setOauthToken(oauthToken);
    }

    @Override
    public List setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (List) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public List setQuotaUser(java.lang.String quotaUser) {
      return (List) super.setQuotaUser(quotaUser);
    }

    @Override
    public List setUserIp(java.lang.String userIp) {
      return (List) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public List setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @Override
    public List set(String parameterName, Object value) {
      return (List) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "point".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link Point#execute()} method to invoke the remote operation.
   *
   * @param group
   * @param lat
   * @param lng
   * @return the request
   */
  public Point point(java.lang.String group, java.lang.Double lat, java.lang.Double lng) throws java.io.IOException {
    Point result = new Point(group, lat, lng);
    initialize(result);
    return result;
  }

  public class Point extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.FenceCollection> {

    private static final String REST_PATH = "point";

    /**
     * Create a request for the method "point".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link Point#execute()} method to invoke the remote operation.
     * <p> {@link
     * Point#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @param lat
     * @param lng
     * @since 1.13
     */
    protected Point(java.lang.String group, java.lang.Double lat, java.lang.Double lng) {
      super(GeofencingApi.this, "GET", REST_PATH, null, com.khanakirana.backend.geofencingApi.model.FenceCollection.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
      this.lat = com.google.api.client.util.Preconditions.checkNotNull(lat, "Required parameter lat must be specified.");
      this.lng = com.google.api.client.util.Preconditions.checkNotNull(lng, "Required parameter lng must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Point setAlt(java.lang.String alt) {
      return (Point) super.setAlt(alt);
    }

    @Override
    public Point setFields(java.lang.String fields) {
      return (Point) super.setFields(fields);
    }

    @Override
    public Point setKey(java.lang.String key) {
      return (Point) super.setKey(key);
    }

    @Override
    public Point setOauthToken(java.lang.String oauthToken) {
      return (Point) super.setOauthToken(oauthToken);
    }

    @Override
    public Point setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Point) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Point setQuotaUser(java.lang.String quotaUser) {
      return (Point) super.setQuotaUser(quotaUser);
    }

    @Override
    public Point setUserIp(java.lang.String userIp) {
      return (Point) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public Point setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lat;

    /**

     */
    public java.lang.Double getLat() {
      return lat;
    }

    public Point setLat(java.lang.Double lat) {
      this.lat = lat;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Double lng;

    /**

     */
    public java.lang.Double getLng() {
      return lng;
    }

    public Point setLng(java.lang.Double lng) {
      this.lng = lng;
      return this;
    }

    @Override
    public Point set(String parameterName, Object value) {
      return (Point) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "polygon".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link Polygon#execute()} method to invoke the remote operation.
   *
   * @param group
   * @param content the {@link com.khanakirana.backend.geofencingApi.model.FencingPolyline}
   * @return the request
   */
  public Polygon polygon(java.lang.String group, com.khanakirana.backend.geofencingApi.model.FencingPolyline content) throws java.io.IOException {
    Polygon result = new Polygon(group, content);
    initialize(result);
    return result;
  }

  public class Polygon extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.FenceCollection> {

    private static final String REST_PATH = "polygon";

    /**
     * Create a request for the method "polygon".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link Polygon#execute()} method to invoke the remote operation.
     * <p> {@link
     * Polygon#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @param content the {@link com.khanakirana.backend.geofencingApi.model.FencingPolyline}
     * @since 1.13
     */
    protected Polygon(java.lang.String group, com.khanakirana.backend.geofencingApi.model.FencingPolyline content) {
      super(GeofencingApi.this, "POST", REST_PATH, content, com.khanakirana.backend.geofencingApi.model.FenceCollection.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
    }

    @Override
    public Polygon setAlt(java.lang.String alt) {
      return (Polygon) super.setAlt(alt);
    }

    @Override
    public Polygon setFields(java.lang.String fields) {
      return (Polygon) super.setFields(fields);
    }

    @Override
    public Polygon setKey(java.lang.String key) {
      return (Polygon) super.setKey(key);
    }

    @Override
    public Polygon setOauthToken(java.lang.String oauthToken) {
      return (Polygon) super.setOauthToken(oauthToken);
    }

    @Override
    public Polygon setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Polygon) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Polygon setQuotaUser(java.lang.String quotaUser) {
      return (Polygon) super.setQuotaUser(quotaUser);
    }

    @Override
    public Polygon setUserIp(java.lang.String userIp) {
      return (Polygon) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public Polygon setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @Override
    public Polygon set(String parameterName, Object value) {
      return (Polygon) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "polyline".
   *
   * This request holds the parameters needed by the geofencingApi server.  After setting any optional
   * parameters, call the {@link Polyline#execute()} method to invoke the remote operation.
   *
   * @param group
   * @param content the {@link com.khanakirana.backend.geofencingApi.model.FencingPolyline}
   * @return the request
   */
  public Polyline polyline(java.lang.String group, com.khanakirana.backend.geofencingApi.model.FencingPolyline content) throws java.io.IOException {
    Polyline result = new Polyline(group, content);
    initialize(result);
    return result;
  }

  public class Polyline extends GeofencingApiRequest<com.khanakirana.backend.geofencingApi.model.FenceCollection> {

    private static final String REST_PATH = "polyline";

    /**
     * Create a request for the method "polyline".
     *
     * This request holds the parameters needed by the the geofencingApi server.  After setting any
     * optional parameters, call the {@link Polyline#execute()} method to invoke the remote operation.
     * <p> {@link
     * Polyline#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param group
     * @param content the {@link com.khanakirana.backend.geofencingApi.model.FencingPolyline}
     * @since 1.13
     */
    protected Polyline(java.lang.String group, com.khanakirana.backend.geofencingApi.model.FencingPolyline content) {
      super(GeofencingApi.this, "POST", REST_PATH, content, com.khanakirana.backend.geofencingApi.model.FenceCollection.class);
      this.group = com.google.api.client.util.Preconditions.checkNotNull(group, "Required parameter group must be specified.");
    }

    @Override
    public Polyline setAlt(java.lang.String alt) {
      return (Polyline) super.setAlt(alt);
    }

    @Override
    public Polyline setFields(java.lang.String fields) {
      return (Polyline) super.setFields(fields);
    }

    @Override
    public Polyline setKey(java.lang.String key) {
      return (Polyline) super.setKey(key);
    }

    @Override
    public Polyline setOauthToken(java.lang.String oauthToken) {
      return (Polyline) super.setOauthToken(oauthToken);
    }

    @Override
    public Polyline setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Polyline) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Polyline setQuotaUser(java.lang.String quotaUser) {
      return (Polyline) super.setQuotaUser(quotaUser);
    }

    @Override
    public Polyline setUserIp(java.lang.String userIp) {
      return (Polyline) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String group;

    /**

     */
    public java.lang.String getGroup() {
      return group;
    }

    public Polyline setGroup(java.lang.String group) {
      this.group = group;
      return this;
    }

    @Override
    public Polyline set(String parameterName, Object value) {
      return (Polyline) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link GeofencingApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link GeofencingApi}. */
    @Override
    public GeofencingApi build() {
      return new GeofencingApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link GeofencingApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setGeofencingApiRequestInitializer(
        GeofencingApiRequestInitializer geofencingapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(geofencingapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
